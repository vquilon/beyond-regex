[
    {
        "description": "This regex matches a double-quoted string. It will correctly match any escaped quotes.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"\\\"\\\\\\\"\\\" and \\\\\\\"asdf\\\"\",\"matches\":[[[0,4],[1,3]],[[10,16],[11,15]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"\\\"\\\\\\\"a\\\\\\\"\\\\\\\"sd\\\\\\\"\\\\\\\"\\\"\",\"matches\":[[[0,15],[1,14]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"\\\"'\\\"\",\"matches\":[[[0,3],[1,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"\\\"\\\\\\\"\\\"\",\"matches\":[[[0,4],[1,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"\\\"\\\\\\\"\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"\\\"asdf\\\" and \\\"asdf\\\"\",\"matches\":[[[0,6],[1,5]],[[11,17],[12,16]]],\"assert\":true}]",
        "regex": "\"((?:\\\\.|[^\"\\\\])*)\"",
        "name": ".quotStr",
        "title": "Quoted String",
        "strFlags": "",
        "testString": "\"asdf\"",
        "token": "KXRbI_J9pqYCm32N",
        "version": 1
    },
    {
        "description": "This regex matches a natural number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"10,123\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"- 3 091230 32.12983\",\"matches\":[[[2,3]],[[5,10]],[[11,13]],[[14,19]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-123\",\"matches\":[[[1,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1 13 213,1\",\"matches\":[[[0,1]],[[2,4]],[[5,8]],[[9,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1.0\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[1-9](?:\\d{0,2}(?:,\\d{3})+|\\d*)",
        "name": ".naturalNumber",
        "title": "Natural Number",
        "strFlags": "",
        "testString": "",
        "token": "oWKZlwAfRbzzFm7W",
        "version": 7
    },
    {
        "description": "This regex matches a C-style variable name. It can contain letters, digits or underscores. It must begin with a letter or underscores.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"B\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"__E8\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"s_gQ7\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"dbBZI4\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"__m___r__1K\",\"matches\":[[[0,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0-15151A-zAasdf015\",\"matches\":[[[7,8]],[[9,18]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"_Aasdf\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"asdf134\",\"matches\":[[[0,7]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"asdf_\",\"matches\":[[[0,5]]],\"assert\":true}]",
        "regex": "[_a-zA-Z][_a-zA-Z0-9]*",
        "name": ".cVariable",
        "title": "C-Style Variable Name",
        "strFlags": "",
        "testString": "<img src=\"youtube.com\">",
        "token": "DDYJ2zgnTkhDfBER",
        "version": 1
    },
    {
        "description": "This regex matches a whole number, which is either 0 or a natural number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"100,123\",\"matches\":[[[0,7]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-1 \",\"matches\":[[[1,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"123123\",\"matches\":[[[0,6]]],\"assert\":true}]",
        "regex": "0|(?&.naturalNumber)",
        "name": ".wholeNumber",
        "title": "Whole Number",
        "strFlags": "",
        "testString": "19923 0 20323 0230 92304 923",
        "token": "QRxol4dUsmCOiqLQ",
        "version": 8
    },
    {
        "description": "This regex matches an integer.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"-1,000\",\"matches\":[[[1,6]]],\"assert\":false},{\"type\":\"findall\",\"string\":\"100,1213\",\"matches\":[[[0,7]],[[7,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-1\",\"matches\":[[[1,2]]],\"assert\":false},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "-(?&.naturalNumber)|(?&.wholeNumber)",
        "name": ".integer",
        "title": "Integer",
        "strFlags": "",
        "testString": "-1",
        "token": "NGEVisDqjQlLfWvG",
        "version": 20
    },
    {
        "description": "This regex matches a valid social security number. The hyphens are optional.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"123456789\",\"matches\":[[[0,9],[3,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"123-45-6789\",\"matches\":[[[0,11],[3,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12345-6789\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"123-456789\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"111111111\",\"matches\":[[[0,9],[3,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"078-05-1120\",\"matches\":[[[0,11],[3,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"987-65-4320\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"111-11-1111\",\"matches\":[[[0,11],[3,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"900-11-1111\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"666-11-1111\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"111-11-0000\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"111-00-1111\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"000-11-1111\",\"matches\":[],\"assert\":true}]",
        "regex": "(?!666|000|9..)[0-9]{3}(-?)(?!00)[0-9]{2}\\1(?!0000)[0-9]{4}",
        "name": ".ssn",
        "title": "SSN",
        "strFlags": "",
        "testString": "987-65-4320",
        "token": "_3setW4lrCkN6ulo",
        "version": 1
    },
    {
        "description": "This regex matches an ISBN-13. It does not verify the checksum.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"ISBN 978 787 787878-8\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 978 787 78 78788\",\"matches\":[[[0,21],[5,21],[8,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 1561616161616161616\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 979-1235-16 16 11\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 9790765335999\",\"matches\":[[[0,18],[5,18],[8,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN: 9780615856735\",\"matches\":[[[0,19],[6,19],[9,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 978-0615-856-73-5\",\"matches\":[[[0,22],[5,22],[8,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN: 978-0615-856-73-5\",\"matches\":[[[0,23],[6,23],[9,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 978-0615-856-73-5\",\"matches\":[[[0,26],[9,26],[12,13]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 9780765335999\",\"matches\":[[[0,22],[9,22],[12,12]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 978-0615856735\",\"matches\":[[[0,23],[9,23],[12,13]]],\"assert\":true}]",
        "regex": "ISBN(?:-13)?:?\\ *(97(?:8|9)([ -]?)(?=\\d{1,5}\\2?\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}\\d)",
        "name": ".isbn13",
        "title": "ISBN-13",
        "strFlags": "",
        "testString": "ISBN 9790765335999",
        "token": "0Npla56ipD5aeTr9",
        "version": 3
    },
    {
        "description": "This regex matches an ISBN-10. It does not verify the checksum.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"ISBN 979076533X\",\"matches\":[[[0,15],[5,15],[10,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 1577677171\",\"matches\":[[[0,15],[5,15],[10,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 978 787 787878-8\",\"matches\":[[[0,17],[5,17],[8,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 978 787 78 78788\",\"matches\":[[[0,18],[5,18],[8,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 1561616161616161616\",\"matches\":[[[0,15],[5,15],[10,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 979-1235-16 16 11\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 9790765335999\",\"matches\":[[[0,15],[5,15],[10,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN: 9780615856735\",\"matches\":[[[0,16],[6,16],[11,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN 978-0615-856-73-5\",\"matches\":[[[0,17],[5,17],[8,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN: 978-0615-856-73-5\",\"matches\":[[[0,18],[6,18],[9,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 978-0615-856-73-5\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 9780765335999\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"ISBN-13: 978-0615856735\",\"matches\":[],\"assert\":true}]",
        "regex": "ISBN(?:-10)?:?\\ *((?=\\d{1,5}([ -]?)\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}[\\dX])",
        "name": ".isbn10",
        "title": "ISBN-10",
        "strFlags": "",
        "testString": "ISBN 979076533X",
        "token": "2s3Wld3CVCR1wKoZ",
        "version": 1
    },
    {
        "description": "This regex matches a single hexadecimal digit.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"a15167afASDFfjajfelekjtahth1516A\",\"matches\":[[[0,1]],[[1,2]],[[2,3]],[[3,4]],[[4,5]],[[5,6]],[[6,7]],[[7,8]],[[8,9]],[[10,11]],[[11,12]],[[12,13]],[[14,15]],[[16,17]],[[17,18]],[[19,20]],[[23,24]],[[27,28]],[[28,29]],[[29,30]],[[30,31]],[[31,32]]],\"assert\":true}]",
        "regex": "[0-9A-Fa-f]",
        "name": ".hex",
        "title": "Hex Digit",
        "strFlags": "",
        "testString": "My test data",
        "token": "BjyeYbII72UQ049K",
        "version": 1
    },
    {
        "description": "This regex matches up to 4 hex digits in a row.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"123412341234123412341234asdf1618787Gfed7\",\"matches\":[[[0,4]],[[4,8]],[[8,12]],[[12,16]],[[16,20]],[[20,24]],[[24,25]],[[25,25]],[[26,30]],[[30,34]],[[34,35]],[[35,35]],[[36,40]],[[40,40]]],\"assert\":true}]",
        "regex": "(?&.hex){0,4}",
        "name": ".hex4",
        "title": "Block of up to 4 Hex Digits",
        "strFlags": "",
        "testString": "123412341234123412341234asdf1618787Gfed7",
        "token": "3dIY290gYOoFBnYY",
        "version": 1
    },
    {
        "description": "This regex matches a number between 0 and 255, inclusive.",
        "isOwner": false,
        "flavor": "pcre",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"a7899292292277224672b\",\"matches\":[[[1,3]],[[3,5]],[[5,7]],[[7,10]],[[10,13]],[[13,15]],[[15,18]],[[18,20]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"000\",\"matches\":[[[0,2]],[[2,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"7681\",\"matches\":[[[0,2]],[[2,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"256\",\"matches\":[[[0,2]],[[2,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"267\",\"matches\":[[[0,2]],[[2,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"255\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"14\",\"matches\":[[[0,2]]],\"assert\":true}]",
        "regex": "(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[0-9]{1,2})",
        "name": ".upto255",
        "title": "Number up to 255",
        "strFlags": "",
        "testString": "ae34:ae:fe:12:51:5af:bcde:123",
        "token": "Mgw_crYujIAV291O",
        "version": 1
    },
    {
        "description": "This regex matches a real number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[]",
        "regex": "(?&.integer)(?:.\\d+|)",
        "name": ".realNumber",
        "title": "Real Number",
        "strFlags": "",
        "testString": "My test data",
        "token": "xFGAd7TVte1s79pu",
        "version": 2
    },
    {
        "description": "This regex matches a (possibly negative) dollar value.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"-$ 50\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-$20\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$ 123,123.92\",\"matches\":[[[0,12]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$1123112.123\",\"matches\":[[[0,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$-1.9\",\"matches\":[[[0,5]]],\"assert\":false},{\"type\":\"findall\",\"string\":\"$5.10\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$5.1\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$5\",\"matches\":[[[0,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"$ 5\",\"matches\":[[[0,3]]],\"assert\":true}]",
        "regex": "\\-?\\$\\ ?(?&.wholeNumber)(?:\\.\\d{1,2}|)",
        "name": ".dollar",
        "title": "Dollar value",
        "strFlags": "",
        "testString": "$",
        "token": "oUx_AU42WaFx2TO3",
        "version": 3
    },
    {
        "description": "This regex matches a valid Visa credit card number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"4000-0000 00000000\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"4000-0000-0000-0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"4000 0000 0000 0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"4000000000000000\",\"matches\":[[[0,16],[4,4]]],\"assert\":true}]",
        "regex": "4(?&.ccbase)",
        "name": ".visa",
        "title": "Visa Credit Card",
        "strFlags": "",
        "testString": "4123 1231 1231 1231",
        "token": "MA2oAHcg1Schhicz",
        "version": 2
    },
    {
        "description": "This regex matches a valid Mastercard credit card number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"5000 0000-0000-0000\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"5000-0000-0000-0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"5000000000000000\",\"matches\":[[[0,16],[4,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"5000 0000 0000 0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"4000 0000 0000 0000\",\"matches\":[],\"assert\":true}]",
        "regex": "5(?&.ccbase)",
        "name": ".mastercard",
        "title": "Mastercard Credit Card",
        "strFlags": "",
        "testString": "My test data",
        "token": "MtY52RCwEFFw-i0M",
        "version": 2
    },
    {
        "description": "This regex matches a valid American Express credit card.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"3000 0000-0000-0000\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"3000-0000-0000-0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"3000 0000 0000 0000\",\"matches\":[[[0,19],[4,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"3000000000000000\",\"matches\":[[[0,16],[4,4]]],\"assert\":true}]",
        "regex": "3(?&.ccbase)",
        "name": ".amex",
        "title": "American Express Credit Card",
        "strFlags": "",
        "testString": "My test data",
        "token": "be3pgleDsi4GM9B4",
        "version": 4
    },
    {
        "description": "This regex matches a valid credit card number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"4000 0000 0000 0000\",\"matches\":[[[0,19],[4,5],null,null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"3000-0000-0000-0000\",\"matches\":[],\"assert\":false},{\"type\":\"findall\",\"string\":\"5000000000000000\",\"matches\":[[[0,16],null,null,[4,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"4000000000000000\",\"matches\":[[[0,16],[4,4],null,null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"3000000000000000\",\"matches\":[[[0,16],null,[4,4],null]],\"assert\":true}]",
        "regex": "(?&.visa)|(?&.amex)|(?&.mastercard)",
        "name": ".creditcard",
        "title": "Credit Card",
        "strFlags": "",
        "testString": "3000 0000 0000 0000",
        "token": "yCRadIBNKUFVw5GL",
        "version": 2
    },
    {
        "description": "This regex matches a valid time, in either 24-hour format or 12-hour am/pm format.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"8:14:00pM\",\"matches\":[[[0,9]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"10:12:12 am\",\"matches\":[[[0,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"13:12:59 am\",\"matches\":[[[0,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12:10 PM\",\"matches\":[[[0,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"13:56:00\",\"matches\":[[[0,8]]],\"assert\":true}]",
        "regex": "(?:(?:0?[1-9]|1[0-2])(?::|\\.)[0-5][0-9](?:(?::|\\.)[0-5][0-9])? ?[aApP][mM])|(?:(?:0?[0-9]|1[0-9]|2[0-3])(?::|\\.)[0-5][0-9](?:(?::|\\.)[0-5][0-9])?)",
        "name": ".time",
        "title": "Time",
        "strFlags": "",
        "testString": "My test data",
        "token": "eZ4di-IwrKFs8Jns",
        "version": 1
    },
    {
        "description": "This regex matches a valid English name of month. It matches short names as well as long names.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"August\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"June\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|June?|July?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:emeber)?|Dec(?:ember)?",
        "name": ".month",
        "title": "Name of month",
        "strFlags": "",
        "testString": "My test data",
        "token": "Us-xKHZEb-OoJ8LX",
        "version": 1
    },
    {
        "description": "No description",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"06-15-69\",\"matches\":[],\"assert\":false},{\"type\":\"findall\",\"string\":\"07/27/90\",\"matches\":[[[0,8],[2,3],null,null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2/1/89\",\"matches\":[[[0,6],null,null,[1,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2/0/19\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"2/29/1990\",\"matches\":[[[0,9],null,[1,2],null]],\"assert\":false},{\"type\":\"findall\",\"string\":\"11/31/1990\",\"matches\":[[[1,10],[2,3],null,null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12/31/1990\",\"matches\":[[[0,10],[2,3],null,null]],\"assert\":true}]",
        "regex": "(?:(?:0?[13578]|10|12)(-|\\/)(?:0?[1-9]|[12][0-9]?|3[01]?)\\1|(?:0?[469]|11)(-|\\/)(?:0?[1-9]|[12][0-9]?|3[0]?)\\2|0?2(-|\\/)(?:0?[1-9]|1[0-9]|2[0-8])\\3)(?:19[2-9]\\d{1}|20[01]\\d{1}|\\d{2})",
        "name": ".dateMDY",
        "title": "Untitled Regex",
        "strFlags": "",
        "testString": "My test data",
        "token": "0VozGgonUI65kE__",
        "version": 0
    },
    {
        "description": "This regex matches a valid IPv6 address.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"::00:192.168.10.184\",\"matches\":[[[0,19]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"fe80::219:7eff:fe46:6c42\",\"matches\":[[[0,24]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"::1\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ae34:ae:fe:12:51:5af:bcde:123\",\"matches\":[[[0,29]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"::\",\"matches\":[[[0,2]]],\"assert\":true}]",
        "regex": "(?:(?:(?:(?&.hex4):){7}(?&.hex4))|(?:(?:(?&.hex4):){6}:(?&.hex4))|(?:(?:(?&.hex4):){5}:(?:(?&.hex4):)?(?&.hex4))|(?:(?:(?&.hex4):){4}:(?:(?&.hex4):){0,2}(?&.hex4))|(?:(?:(?&.hex4):){3}:(?:(?&.hex4):){0,3}(?&.hex4))|(?:(?:(?&.hex4):){2}:(?:(?&.hex4):){0,4}(?&.hex4))|(?:(?:(?&.hex4):){6}(?:(?&.upto255)\\.){3}(?&.upto255))|(?:(?:(?&.hex4):){0,5}:(?:(?&.upto255)\\.){3}(?&.upto255))|(?:::(?:(?&.hex4):){0,5}(?:(?&.upto255)\\.){3}(?&.upto255))|(?:(?&.hex4)::(?:(?&.hex4):){0,5}(?&.hex4))|(?:::(?:(?&.hex4):){0,6}(?&.hex4))|(?:(?:(?&.hex4):){1,7}:))",
        "name": ".ipv6",
        "title": "IPv6",
        "strFlags": "",
        "testString": "ae34:ae:fe:12:51:5af:bcde:123",
        "token": "bx8G7msBKV_8xcHZ",
        "version": 0
    },
    {
        "description": "This regex matches a valid IPv4 address.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"15.1616.1717.17.1882.28.28.28.28.828.8.28.882.228.287.337.32.26.7.3\",\"matches\":[[[18,29]],[[34,44]],[[55,65]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"114.114.141.291\",\"matches\":[[[0,14]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"8.8.8.8\",\"matches\":[[[0,7]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"192.168.0.1\",\"matches\":[[[0,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"127.0.0.1\",\"matches\":[[[0,9]]],\"assert\":true}]",
        "regex": "(?:(?&.upto255)\\.){3}(?&.upto255)",
        "name": ".ipv4",
        "title": "IPv4",
        "strFlags": "",
        "testString": "",
        "token": "QrC7blrmD11myKEc",
        "version": 0
    },
    {
        "description": "This regex matches the tail of a credit card number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"116-1611-1616-161661\",\"matches\":[[[0,18],[3,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"151-1516-6723-3833\",\"matches\":[[[0,18],[3,4]]],\"assert\":true}]",
        "regex": "[0-9]{3}(| |-)(?:[0-9]{4}\\1){2}[0-9]{4}",
        "name": ".ccbase",
        "title": "Credit Card Base",
        "strFlags": "",
        "testString": "My test data",
        "token": "aKbWH3oXgviT3Lf-",
        "version": 1
    },
    {
        "description": "Matches a valid date of the format YYYYMMDD, delimited by /, -, or .",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"2000-02-29\",\"matches\":[[[0,10],[4,5],null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2100-02-29\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"2004-02-29\",\"matches\":[[[0,10],[4,5],null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2010/03-15\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"2005/02/29\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"Another valid date: 2004/02/29\",\"matches\":[[[20,30],[24,25],null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2010-03-15\",\"matches\":[[[0,10],null,[4,5]]],\"assert\":true}]",
        "regex": "\\b(?:(?:(?&.leapYear)(\\/|-|\\.)(?:0?2\\1(?:29)))|(?:(?&.year)(\\/|-|\\.)(?:(?:(?:0?[13578]|1[02])\\2(?:31))|(?:(?:0?[13-9]|1[0-2])\\2(?:29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\\2(?:0?[1-9]|1\\d|2[0-8]))))\\b",
        "name": ".dateYYYYMMDD",
        "title": "Date YYYYMMDD",
        "strFlags": "",
        "testString": "Valid date: 2010-03-15\nAnother valid date: 2004/02/29\nInvalid date: 2005/02/29\nAnother invalid date: 2010/03-15",
        "token": "xJCrAGzGExSDuRMF",
        "version": 2
    },
    {
        "description": "This regex matches a valid leap year between 1000 and 9999.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"1600\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1200\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1400\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1000\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9996\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2104\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2007\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"2000\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2100\",\"matches\":[],\"assert\":true}]",
        "regex": "(?:[1-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:(?:[2468][048]|[13579][26])00)",
        "name": ".leapYear",
        "title": "Leap Year",
        "strFlags": "",
        "testString": "2104",
        "token": "cPHZvaz0KiDV8N7a",
        "version": 2
    },
    {
        "description": "Matches a 4-digit year between 1000 and 9999",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"1256\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"9999\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1000\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "[1-9][0-9]{3}",
        "name": ".year",
        "title": "Year",
        "strFlags": "",
        "testString": "My test data",
        "token": "_maoxgEIIwTLWgZN",
        "version": 0
    },
    {
        "description": "This regex fails to match any string. It is efficient.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"a\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"\",\"matches\":[],\"assert\":true}]",
        "regex": "$a",
        "name": ".fail",
        "title": "Fail on Everything",
        "strFlags": "",
        "testString": "My test data",
        "token": "zGi9mt5qYGqQkHhB",
        "version": 0
    },
    {
        "description": "This regex matches a hex color of the form #YYYYYY.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"#12340F\",\"matches\":[[[0,7]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"#ffffff\",\"matches\":[[[0,7]]],\"assert\":true}]",
        "regex": "#(?&.hex){6}",
        "name": ".hexColor",
        "title": "Hex Color",
        "strFlags": "",
        "testString": "My test data",
        "token": "jAVcm5pg5IKPh581",
        "version": 0
    },
    {
        "description": "This matches any character, regardless of what flags are set.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"aasdfasdf\\nasdfasdf\\nasdadsf\",\"matches\":[[[0,1]],[[1,2]],[[2,3]],[[3,4]],[[4,5]],[[5,6]],[[6,7]],[[7,8]],[[8,9]],[[9,10]],[[10,11]],[[11,12]],[[12,13]],[[13,14]],[[14,15]],[[15,16]],[[16,17]],[[17,18]],[[18,19]],[[19,20]],[[20,21]],[[21,22]],[[22,23]],[[23,24]],[[24,25]],[[25,26]]],\"assert\":true}]",
        "regex": "[\\s\\S]",
        "name": ".any",
        "title": "Any character",
        "strFlags": "",
        "testString": "My test data",
        "token": "N1BsSDXqKopgkRFF",
        "version": 0
    },
    {
        "description": "This regex matches a single lowercase letter.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[a-z]",
        "name": ".lowerAlpha",
        "title": "Lowercase Letter",
        "strFlags": "",
        "testString": "My test data",
        "token": "xozMsSYJyXu2mm1A",
        "version": 1
    },
    {
        "description": "This regex matches a single uppercase letter.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"7\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"_\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[A-Z]",
        "name": ".upperAlpha",
        "title": "Uppercase Letter",
        "strFlags": "",
        "testString": "My test data",
        "token": "BmDPYZ61aiBL9SX-",
        "version": 1
    },
    {
        "description": "This regex matches a single letter.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"9\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"_\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[a-zA-Z]",
        "name": ".alpha",
        "title": "Letter",
        "strFlags": "",
        "testString": "My test data",
        "token": "BhR-0H9X0jUptMWy",
        "version": 2
    },
    {
        "description": "This regex matches a single letter or digit.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"_\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[a-zA-Z0-9]",
        "name": ".aphanum",
        "title": "Alphanumeric Character",
        "strFlags": "",
        "testString": "My test data",
        "token": "LMmsMwymHPlWZ_UT",
        "version": 0
    },
    {
        "description": "This regex matches a punctuation mark according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\")\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"(\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"'\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"*\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"~\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"!\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\".\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"_\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[\\-_.!~*'()]",
        "name": ".mark",
        "title": "Punctuation Mark",
        "strFlags": "",
        "testString": "My test data",
        "token": "J-7inLBnUprpeaQD",
        "version": 1
    },
    {
        "description": "This regex matches a single letter or digit.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"_\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[a-zA-Z0-9]",
        "name": ".alphanum",
        "title": "Alphanumeric Character",
        "strFlags": "",
        "testString": "My test data",
        "token": "aj_eQ0k-Ub3pBURD",
        "version": 0
    },
    {
        "description": "This matches a single unreserved character according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\".\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"~\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"9\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"_\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "(?&.alphanum)|(?&.mark)",
        "name": ".unreserved",
        "title": "Unreserved Character",
        "strFlags": "",
        "testString": "",
        "token": "aE-UT5BE6uEqQeDb",
        "version": 0
    },
    {
        "description": "This matches an escaped octet in a URI, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"%00\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"%ff\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"%20\",\"matches\":[[[0,3]]],\"assert\":true}]",
        "regex": "%(?&.hex)(?&.hex)",
        "name": ".uriEscaped",
        "title": "URI Escaped Octet",
        "strFlags": "",
        "testString": "",
        "token": "1nPQ969UXcM5DlWc",
        "version": 0
    },
    {
        "description": "Matches a single ASCII digit. Ignores all flags.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"9\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[0-9]",
        "name": ".digit",
        "title": "Digit",
        "strFlags": "",
        "testString": "My test data",
        "token": "_bSiJ3OpAC45WUQQ",
        "version": 0
    },
    {
        "description": "This matches a URI scheme, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"telnet\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"gopher\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"git\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"ftp\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"http\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "(?&.alpha)(?:(?&.alpha)|(?&.digit)|[+\\-.])*",
        "name": ".uriScheme",
        "title": "URI Scheme",
        "strFlags": "",
        "testString": "",
        "token": "cE-1XdmHGnIVXROg",
        "version": 0
    },
    {
        "description": "This matches the userinfo portion of a URI, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"%13username\",\"matches\":[[[0,11]],[[11,11]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"another&username\",\"matches\":[[[0,16]],[[16,16]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"username\",\"matches\":[[[0,8]],[[8,8]]],\"assert\":true}]",
        "regex": "(?:(?&.unreserved)|(?&.uriEscaped)|[;:&=+$,])*",
        "name": ".userinfo",
        "title": "URI Userinfo",
        "strFlags": "",
        "testString": "username;",
        "token": "53QI7qTl64aM9JiY",
        "version": 1
    },
    {
        "description": "This matches a reserved URI character, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\":\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"?\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"/\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\";\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "[;/?:@&=+$,]",
        "name": ".uriReserved",
        "title": "URI Reserved Character",
        "strFlags": "",
        "testString": "My test data",
        "token": "zRHEghx76dZo9aHC",
        "version": 2
    },
    {
        "description": "Postal codes of the form 'DDDD', with the first two digits 02, 08 or 20-97. Leading 0 may be omitted. 909 and 0909 are valid as well - but no other postal codes starting with 9 or 09.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"892\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"8234\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"234\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0212\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0123\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1023\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9912\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9012\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"9091\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0909\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "(?:(?:[2-8][0-9]|9[0-7]|0?[28]|0?9(?=09))(?:[0-9]{2}))",
        "name": ".ausPostalCode",
        "title": "Australian Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "VKo4Fe50fEH2vLVF",
        "version": 0
    },
    {
        "description": "Postal codes of the form: 'DDDD', with the first digit representing the province; the others distribution sectors. Postal codes do not start with a zero.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"123\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"9021\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1234\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0123\",\"matches\":[],\"assert\":true}]",
        "regex": "(?:(?:[1-9])(?:[0-9]{3}))",
        "name": ".belPostalCode",
        "title": "Belgium Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "3YYpuFA-ZpFKUp9N",
        "version": 0
    },
    {
        "description": "Postal codes of the form: 'DDDD', with the first digit representing the distribution region, the second digit the distribution district. Postal codes do not start with a zero. Postal codes starting with '39' are in Greenland.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"2341\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"5678\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"3912\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1234\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "[1-24-9][0-9]{3}|3[0-8][0-9]{2}",
        "name": ".denPostalCode",
        "title": "Denmark",
        "strFlags": "",
        "testString": "My test data",
        "token": "KNxSGxPF_AJ1Xi7N",
        "version": 0
    },
    {
        "description": "Postal codes of the form: 'DDDDD'. All digits are used. First two digits indicate the department, and range from 01 to 98, or 00 for army.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"99123\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"00123\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12345\",\"matches\":[[[0,5]]],\"assert\":true}]",
        "regex": "(?:[0-8][0-9]|9[0-8])[0-9]{3}",
        "name": ".fraPostalCode",
        "title": "France Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "fez6vLJZjhdvbC4u",
        "version": 0
    },
    {
        "description": "This matches a single unreserved character according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\".\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"~\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"9\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"_\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"Z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"A\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"z\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "(?&.alphanum)|(?&.mark)",
        "name": ".uriUnreserved",
        "title": "Unreserved Character",
        "strFlags": "",
        "testString": "",
        "token": "zuDT5x9ihS7Vu7uM",
        "version": 0
    },
    {
        "description": "Postal codes of the form: 'DDDDD'. All digits are used. First digit is the distribution zone, second a distribution region. Other digits indicate the distribution district and postal town.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"99999\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"00000\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12345\",\"matches\":[[[0,5]]],\"assert\":true}]",
        "regex": "[0-9]{5}",
        "name": ".gerPostalCode",
        "title": "German Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "tW4ypY5mtdPcOdoZ",
        "version": 0
    },
    {
        "description": "This matches a single URI Character, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"%25\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"%20\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"?\",\"matches\":[[[0,1]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "(?&.uriReserved)|(?&.uriUnreserved)|(?&.uriEscaped)",
        "name": ".uriCharacter",
        "title": "URI Character",
        "strFlags": "",
        "testString": "My test data",
        "token": "AOdx7-NayvAjl6J6",
        "version": 0
    },
    {
        "description": "Postal codes of Greenland are part of the Danish system. Codes in Greenland start with 39.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"1234\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"3912\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "39[0-9]{2}",
        "name": ".grePostalCode",
        "title": "Greenland Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "1smdXSwAQZsKnovw",
        "version": 0
    },
    {
        "description": "First digit: region. Second digit: province. Third digit: capital/province (odd for capital). Fourth digit: route. Fifth digit: place on route (0 for small places)",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"1234\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"12345\",\"matches\":[[[0,5]]],\"assert\":true}]",
        "regex": "[0-9]{5}",
        "name": ".itaPostalCode",
        "title": "Italian Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "DdmRaSDXUujnOTMc",
        "version": 0
    },
    {
        "description": "Four digits",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"124\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1234\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "[0-9]{4}",
        "name": ".norPostalCode",
        "title": "Norway Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "WAOdF0Azqc32ql58",
        "version": 0
    },
    {
        "description": "This matches a valid character occuring in the path of a URI, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\":@%21\",\"matches\":[[[0,1]],[[1,2]],[[2,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"%20\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"a\",\"matches\":[[[0,1]]],\"assert\":true}]",
        "regex": "(?&.uriUnreserved)|(?&.uriEscaped)|[:@&=+$,]",
        "name": ".uriPathChar",
        "title": "URI Path Character",
        "strFlags": "",
        "testString": "My test data",
        "token": "8itE5nOcJpAZDX30",
        "version": 0
    },
    {
        "description": "Five digits, first two indicate the province. Third digit: large town, main delivery rounds. Last 2 digits: delivery area, secondary delivery route or link to rural areas.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"99999\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"52000\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"01000\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"00000\",\"matches\":[],\"assert\":true}]",
        "regex": "(?:0[1-9]|[1-4][0-9]|5[0-2])[0-9]{3}",
        "name": ".spaPostalCode",
        "title": "Spain Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "hJ4B7TQMsvsPQ7l-",
        "version": 0
    },
    {
        "description": "Four digits, first is district, second is area, third is route, fourth is post office number.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"9999\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0111\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1111\",\"matches\":[[[0,4]]],\"assert\":true}]",
        "regex": "[1-9][0-9]{3}",
        "name": ".swiPostalCode",
        "title": "Switzerland Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "7M3TzdFzf6Bz_ieV",
        "version": 0
    },
    {
        "description": "The opaque part of a URI, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"opaque/asdfasdf/aqewr/url\",\"matches\":[[[0,25]]],\"assert\":true}]",
        "regex": "(?:(?&.uriUnreserved)|(?&.uriEscaped)|[;?:@&=+$,])(?:(?&.uriCharacter)*)",
        "name": ".uriOpaque",
        "title": "URI Opaque Part",
        "strFlags": "",
        "testString": "",
        "token": "tfDnABpe4wM0u25j",
        "version": 0
    },
    {
        "description": "Matches a URI Segment, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"asdfasdf;asdfasdf\",\"matches\":[[[0,17]],[[17,17]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"asdf\",\"matches\":[[[0,4]],[[4,4]]],\"assert\":true}]",
        "regex": "(?&.uriPathChar)*(?:;(?&.uriPathChar)*)*",
        "name": ".uriSegment",
        "title": "URI Segment",
        "strFlags": "",
        "testString": "asdf",
        "token": "m7W9_n-XN7GGPvfO",
        "version": 0
    },
    {
        "description": "This matches a URI path segment, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"atat/aasdf/asdfasd;asdf;asdf;/asdfadsf\",\"matches\":[[[0,38]],[[38,38]]],\"assert\":true}]",
        "regex": "(?&.uriSegment)(?:/(?&.uriSegment))*",
        "name": ".uriPathSegment",
        "title": "URI Path Segment",
        "strFlags": "",
        "testString": "My test data",
        "token": "l24H39ZxpeVQSbBh",
        "version": 1
    },
    {
        "description": "Postal codes of the form 'DDDD LL', with F, I, O, Q, U and Y not used, SA, SD and SS unused combinations, and the first digit cannot be 0. No specific meaning to the letters or digits.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"9438AE\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2378SC\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"2378SS\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"1000ab\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"0000 aa\",\"matches\":[],\"assert\":true}]",
        "regex": "[1-9][0-9]{3} ?(?:[A-EGHJ-NPRTVWXZ][A-EGHJ-NPRSTVWXZ]|S[BCEGHJ-NPRTVWXZ])",
        "name": ".dutPostalCode",
        "title": "Dutch/Netherlands Postal Code",
        "strFlags": "i",
        "testString": "My test data",
        "token": "dOpRbBhoqPW_dvgA",
        "version": 0
    },
    {
        "description": "Postal codes of the form 'DDDDD' or 'DDDDD-DDDD'. All digits are used, none carry any specific meaning.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"12345\",\"matches\":[[[0,5]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"1234-12435\",\"matches\":[[[5,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12345-6789\",\"matches\":[[[0,10]]],\"assert\":true}]",
        "regex": "[0-9]{5}(?:-[0-9]{4}|)",
        "name": ".usaPostalCode",
        "title": "USA Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "p3jn5sNu8njv0n4G",
        "version": 0
    },
    {
        "description": "This matches a top level domain, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"ly\",\"matches\":[[[0,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"io\",\"matches\":[[[0,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"museum\",\"matches\":[[[0,6]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"net\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"org\",\"matches\":[[[0,3]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"com\",\"matches\":[[[0,3]]],\"assert\":true}]",
        "regex": "(?&.alpha)(?:(?&.alphanum)|-)*(?&.alphanum)|(?&.alpha)",
        "name": ".uriTopLevel",
        "title": "URI Top Level Domain",
        "strFlags": "",
        "testString": "My test data",
        "token": "KsyayZIcXcmaUBjd",
        "version": 0
    },
    {
        "description": "Matches a URI Domain Label, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"ends-with-hyphen-\",\"matches\":[[[0,16]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"hypen-domain\",\"matches\":[[[0,12]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"debuggex\",\"matches\":[[[0,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"google\",\"matches\":[[[0,6]]],\"assert\":true}]",
        "regex": "(?:(?&.alphanum)(?:(?&.alphanum)|-)*(?&.alphanum))|(?&.alphanum)",
        "name": ".uriDomainLabel",
        "title": "URI Domain Label",
        "strFlags": "",
        "testString": "",
        "token": "KhI-fAXTIE1mi25S",
        "version": 0
    },
    {
        "description": "Matches a URI hostname, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"a.b.c.debuggex.com\",\"matches\":[[[0,18]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"www.debuggex.com\",\"matches\":[[[0,16]]],\"assert\":true}]",
        "regex": "(?:(?&.uriDomainLabel)\\.)*(?&.uriTopLevel)\\.?",
        "name": ".uriHostname",
        "title": "URI Hostname",
        "strFlags": "",
        "testString": "www.debuggex.com",
        "token": "ZWpJ4qgEGKGU5qFZ",
        "version": 0
    },
    {
        "description": "Matches a URI host, as per RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"280.280.180.180\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"blog\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"debuggex.com\",\"matches\":[[[0,12]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"192.168.1.1\",\"matches\":[[[0,11]]],\"assert\":true}]",
        "regex": "(?&.uriHostname)|(?&.ipv4)",
        "name": ".uriHost",
        "title": "URI Host",
        "strFlags": "",
        "testString": "",
        "token": "lkKxzGG37YIW_R1V",
        "version": 0
    },
    {
        "description": "Matches the server portion of a URI, according to RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"abracadabra@google.com\",\"matches\":[[[0,22],[0,11],[12,22],null]],\"assert\":true},{\"type\":\"findall\",\"string\":\"user@192.168.1.1:512\",\"matches\":[[[0,20],[0,4],[5,16],[17,20]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"asdfas:616\",\"matches\":[[[0,10],null,[0,6],[7,10]]],\"assert\":true}]",
        "regex": "(?:(?:((?&.userinfo))@)?((?&.uriHost))(?::((?&.digit)*))?)",
        "name": ".uriServer",
        "title": "URI Server",
        "strFlags": "",
        "testString": "",
        "token": "x0P8DlugR2N-xFVF",
        "version": 1
    },
    {
        "description": "Matches an authority, as specified by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"user@www.google.com:1234\",\"matches\":[[[0,24],[0,4],[5,19],[20,24]]],\"assert\":true}]",
        "regex": "(?&.uriServer)|(?:(?&.uriUnreserved)|(?&.uriEscaped)|[$,;:@&=+])+",
        "name": ".uriAuthority",
        "title": "URI Authority",
        "strFlags": "",
        "testString": "serge@www.google.com:6543",
        "token": "5ytB2FIyNPQkXGuo",
        "version": 0
    },
    {
        "description": "This matches an absolute path, as defined by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"/asdf/asdf/asdf\",\"matches\":[[[0,15]]],\"assert\":true}]",
        "regex": "/(?&.uriPathSegment)",
        "name": ".uriAbsPath",
        "title": "URI Absolute Path",
        "strFlags": "",
        "testString": "My test data",
        "token": "ZyrzUM4AN4ra0iBU",
        "version": 0
    },
    {
        "description": "Matches a relative path, as specified by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"asdf/dsafasdf/asdf\",\"matches\":[[[0,18]]],\"assert\":true}]",
        "regex": "(?:(?&.uriUnreserved)|(?&.uriEscaped)|[;@&=+$,])+(?&.uriAbsPath)?",
        "name": ".uriRelPath",
        "title": "URI Relative Path",
        "strFlags": "",
        "testString": "My test data",
        "token": "fvBm5NwlXwDCdVQo",
        "version": 0
    },
    {
        "description": "Matches a net path, as defined by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"//www.example.com/hello/world\",\"matches\":[[[0,29],null,[2,17],null,[17,29]]],\"assert\":true}]",
        "regex": "//(?&.uriAuthority)((?&.uriAbsPath)?)",
        "name": ".uriNetPath",
        "title": "URI Net Path",
        "strFlags": "",
        "testString": "",
        "token": "0QPYXwIfIF_M-4uR",
        "version": 0
    },
    {
        "description": "The hierarchical part of a URI, as defined by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"//www.asdf.com/asdf?key=val&key2=val2\",\"matches\":[[[0,37],null,[2,14],null,[14,19],[20,37]]],\"assert\":true}]",
        "regex": "(?:(?&.uriNetPath)|(?&.uriAbsPath))(?:\\?((?&.uriCharacter)*))?",
        "name": ".uriHierPart",
        "title": "URI Hierarchical Part",
        "strFlags": "",
        "testString": "My test data",
        "token": "yrWllqTDG8w4pWzE",
        "version": 0
    },
    {
        "description": "Matches a relative URI, as defined in RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"/asdf/asdf/asdf?asdfadsf=1234\",\"matches\":[[[0,29],null,null,null,null,[16,29]]],\"assert\":true}]",
        "regex": "(?:(?&.uriNetPath)|(?&.uriAbsPath)|(?&.uriRelPath))(?:\\?((?&.uriCharacter)*))?",
        "name": ".uriRel",
        "title": "Relative URI",
        "strFlags": "",
        "testString": "",
        "token": "J1A0fJsCzejHJ12O",
        "version": 0
    },
    {
        "description": "Matches an absolute URI, as defined by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"http://www.example.com/asdfasdf?asd=asdf\",\"matches\":[[[0,40],[0,4],null,[7,22],null,[22,31],[32,40]]],\"assert\":true}]",
        "regex": "((?&.uriScheme)):(?:(?&.uriHierPart)|(?&.uriOpaque))",
        "name": ".uriAbs",
        "title": "Absolute URI",
        "strFlags": "",
        "testString": "",
        "token": "LkqrUhajnzfAgMnr",
        "version": 0
    },
    {
        "description": "Matches a URI reference, as defined by RFC 2396.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"http://www.example.com/path?query#identifier\",\"matches\":[[[0,44],[0,4],null,[7,22],null,[22,27],[28,33],null,null,null,null,null,[34,44]],[[44,44],null,null,null,null,null,null,null,null,null,null,null,null]],\"assert\":true}]",
        "regex": "(?:(?&.uriAbs)|(?&.uriRel))?(?:#((?&.uriCharacter)*))?",
        "name": ".uriRef",
        "title": "URI Reference",
        "strFlags": "",
        "testString": "",
        "token": "8CNUbgMJGUPJ4wsO",
        "version": 0
    },
    {
        "description": "A 6 digit Canadian Postal Code.",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[]",
        "regex": "[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1}[ -]?\\d{1}[A-Z]{1}\\d{1}",
        "name": ".canPostalCode",
        "title": "Canadian Postal Code",
        "strFlags": "i",
        "testString": "My test data",
        "token": "AAarm-b8H4RWIGKm",
        "version": 0
    },
    {
        "description": "British Postal Code Schema",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[]",
        "regex": "GIR 0AA|(?:(?:(?:A[BL]|B[ABDHLNRSTX]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKLMNOPRSTY]?|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)[1-9]?[0-9]|(?:(?:E|N|NW|SE|SW|W)1|EC[1-4]|WC[12])[A-HJKMNPR-Y]|(?:SW|W)(?:[2-9]|[1-9][0-9])|EC[1-9][0-9])[0-9][ABD-HJLNP-UW-Z]{2})",
        "name": ".briPostalCode",
        "title": "British Postal Code",
        "strFlags": "",
        "testString": "My test data",
        "token": "HKhqIcSfC9ujZZj-",
        "version": 0
    },
    {
        "description": "This regex matches a valid time according to %H:%M:%S",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"192.168.1/1\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"8:14:00pM\",\"matches\":[[[0,7],[0,1],[2,4],[5,7]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"10:12:12 am\",\"matches\":[[[0,8],[0,2],[3,5],[6,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"13:12:59 am\",\"matches\":[[[0,8],[0,2],[3,5],[6,8]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"12:10 PM\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"13:56:00\",\"matches\":[[[0,8],[0,2],[3,5],[6,8]]],\"assert\":true}]",
        "regex": "(0?[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])",
        "name": ".time_HMS",
        "title": "Time HMS",
        "strFlags": "",
        "testString": "12:40:32",
        "token": "hKCyOSz-VJqO0G8d",
        "version": 0
    },
    {
        "description": "Matches a valid CSS class name",
        "isOwner": false,
        "flavor": "javascript",
        "unitTests": "[{\"type\":\"findall\",\"string\":\"asdf\",\"matches\":[[[0,4]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"-23661\",\"matches\":[],\"assert\":true},{\"type\":\"findall\",\"string\":\"-_\",\"matches\":[[[0,2]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"hipaf-asdf\",\"matches\":[[[0,10]]],\"assert\":true},{\"type\":\"findall\",\"string\":\"-adsf\",\"matches\":[[[0,5]]],\"assert\":true}]",
        "regex": "-?[_a-zA-Z]+[_a-zA-Z0-9-]*",
        "name": ".cssClass",
        "title": "CSS Class",
        "strFlags": "",
        "testString": "",
        "token": "mwCgr_iczch8IhTr",
        "version": 0
    }
]